#!/usr/bin/perl -w

# {{{ initial comments
#
# $LastChangedDate$
# $LastChangedRevision$
# $LastChangedBy$
#
# }}}

# {{{ program header

#
use strict;
use vars qw($Bin $Config $Script $Plugins $UserName $prefix);

BEGIN {
  my $null = $0; $null =~ tr!\\!/!; # for win :-(
  $Bin     = ($null =~ /^(.*)\/.*$/)? $1 : '.';
  $Script  = ($null =~ /^.*\/(.*)$/)? $1 : $null;

  # get the path to the configuration
  $Config = $ENV{CF_CONF_DIR} or die 'Could not get config path';

  $Plugins = {};
  $UserName = '';
  $prefix  = '@prefix@';
}

use lib "@PERLMODULES@";

use BerkeleyDB;

sub VERSION {(q$Revision$ =~ /([\d.]+)\s*$/)[0] or '0.0'}
# }}}

my $fo_default_conf  = read_configuration($Config.'fo_default.conf')  or die "Config file error: $!";

opendir DIR,$Config or die "opendir($Config): $!";
my @msgfiles = grep /messages.[a-z]{2,3}.txt$/,readdir DIR;
closedir DIR;

my $db = new BerkeleyDB::Btree(
  -Filename => $fo_default_conf->{MessagesDatabase}->[0]->[0],
	-Flags => DB_CREATE
) or die "BDB error: $!";

foreach my $msgfile (@msgfiles) {
  next unless $msgfile =~ /messages\.([a-z]{2}).txt$/;
	my $lang = $1;

  print "Working on $Config/$msgfile (detected language: $lang)\n";

  open DAT,'<',"$Config/$msgfile" or die "$Config/$msgfile: $!";

  while(<DAT>) {
	  next unless m/^([a-zA-Z0-9_]+): (.*)\n/;
		my ($key,$value) = ($1,$2);
		$db->db_put("${lang}_$key",$value);
	}

	close DAT;
}

undef $db;

# {{{ read_string
sub read_string {
  my $line = shift;
  my $i    = shift;
  my $val  = "";

  for($$i++;$$i<length($line);$$i++) {
    my $c = substr($line,$$i,1);
    if($c eq '\\') {
      my $c = substr($line,$$i+1,1);

      if($c eq 'n') {
        $val .= "\n";
      }
      elsif($c eq 't') {
        $val .= "\t";
      }
      else {
        $val .= $c;
      }

      $$i++;
    }
    elsif($c eq '"') {
      return $val;
    }
    else {
      $val .= $c;
    }
  }

}
# }}}

# {{{ parse_argument
sub parse_argument {
  my $cfg  = shift;
  my $line = shift;

  return 1 if $line =~ /^\s*#/;

  if($line =~ s/^\s*([A-Za-z0-9]+)//) {
    my $directive = $1;
    my $i         = 0;
    my @vals      = ();

    $cfg->{$directive} = [] unless exists $cfg->{$directive};

    for($i=0;$i<length($line);$i++) {
      my $c = substr($line,$i,1);
      if($c eq '"') {
        my $val = read_string($line,\$i);
        push @vals,$val;
      }
    }

    if($#vals != -1) {
      push @{$cfg->{$directive}},[@vals];
      return 1;
    }
    else {
      return;
    }

  }

  return;

}
# }}}

# {{{ read_configuration
sub read_configuration {
  my $cfgfile = shift;
  my $cfg     = {};
  local *DAT;

  open DAT,'<'.$cfgfile or return;

  while(<DAT>) {
    next if m/^\s*(\#|$ )/x;
    next if m/^\s*</;
    next unless parse_argument($cfg,$_);
  }

  close DAT and return $cfg;

  return;
}
# }}}

# eof
