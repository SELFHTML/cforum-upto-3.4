#!/usr/bin/perl -w

# {{{ initial comments
#
# $LastChangedDate$
# $LastChangedRevision$
# $LastChangedBy$
#
# }}}

# {{{ program header

#
use strict;
use vars qw($prefix $exec_prefix $Forum $conffiles);

BEGIN {
  $prefix      = "@CMAKE_INSTALL_PREFIX@";
  $exec_prefix = "@CMAKE_INSTALL_PREFIX@";
  $Forum       = '';
  $conffiles   = {};
}

use lib "@CMAKE_INSTALL_LIBDIR_FULL@/cforum";

sub VERSION {(q$Revision$ =~ /([\d.]+)\s*$/)[0] or '0.0'}

use IO::Socket;
use BerkeleyDB;

use ForumUtils qw/read_configuration get_config_files get_conf_val/;

use Getopt::Long;
# }}}

my $conf = '';

GetOptions(
  "config-directory=s" => \$conf,
  "forum-name=s" => \$Forum
);

if(!$Forum || !$conf) {
  print STDERR "You must give the forum name!\n" unless $Forum;
  print STDERR "You must give the config directory!\n" unless $conf;

  usage();
}

$ENV{CF_CONF_DIR} = $conf;
my @fnames;
die "could not get config files" unless @fnames = get_config_files("fo_default","fo_cleanup");

my $config  = read_configuration($fnames[0]) or die "Could not read $fnames[0]: $!";
my $config1 = read_configuration($fnames[1]) or die "Could not read $fnames[1]: $!";

my $sock = new IO::Socket::UNIX(
  Type => SOCK_STREAM,
  Peer => get_conf_val($config,'global','SocketName')
) or die 'Could not connect to forum on '.get_conf_val($config,'global','SocketName').": $!\n";

# {{{ get mids
my %mids = ();

print $sock "SELECT $Forum\nGET MIDLIST\n";
<$sock>;
<$sock>;

while(<$sock>) {
  last if m/^\s*$/;
  chop;
  $mids{$_}++;
}

print $sock "GET TIDLIST\n";
<$sock>;
# }}}

# {{{ get tids
my %tids = ();

while(<$sock>) {
  last if m/^\s*$/;
  chop;
  $tids{$_}++;
}

print $sock "QUIT\n";
close $sock;
# }}}

my $tidfiles = $config1->{$Forum}->{TidFile};
my $midfiles = $config1->{$Forum}->{MidFile};

my $global_midfiles = $config1->{$Forum}->{GlobalMidFile};
my $global_tidfiles = $config1->{$Forum}->{GlobalTidFile};

# {{{ walk through user configurations
my $userconfigdir = get_conf_val($config,$Forum,'ConfigDirectory');

opendir DIR,$userconfigdir or die "could not open $userconfigdir: $!\n";

while(my $ent = readdir DIR) {
  next if substr($ent,0,1) eq '.' || !-d "$userconfigdir/$ent";

  my $dir1 = "$userconfigdir/$ent";
  opendir DIR1, $dir1 or die "could not open $dir1: $!\n";

  while(my $ent1 = readdir DIR1) {
    next if substr($ent1,0,1) eq '.' || !-d "$dir1/$ent1";

    my $dir2 = "$dir1/$ent1";
    opendir DIR2, $dir2 or die "could not open $dir2: $!\n";

    while(my $ent2 = readdir DIR2) {
      next if substr($ent2,0,1) eq '.' || !-d "$dir2/$ent2";

      my $dir3 = "$dir2/$ent2";
      opendir DIR3, $dir3 or die "could not open $dir3: $!\n";

      while(my $ent3 = readdir DIR3) {
        next unless $ent3 =~ /\.conf$/;

        my $uname = $ent3;
        $uname =~ s!\.conf$!!; #!

        my $uconf_file = "$dir3/$ent3";
        my $cfg        = read_configuration($uconf_file) or do {
          print STDERR "Could not read $uconf_file: $!\n";
          next;
        };

        foreach my $file (@$tidfiles) {
          my $cfg_name;
          next unless $cfg_name = get_conf_val($cfg,'global',$file->[0]);

          cleanup_tid_file(\%tids,$cfg_name,$uname,$file->[1]);
        }

        foreach my $file (@$midfiles) {
          my $cfg_name;
          next unless $cfg_name = get_conf_val($cfg,'global',$file->[0]);

          cleanup_mid_file(\%mids,$cfg_name,$uname,$file->[1]);
        }
      }

      closedir DIR3;
    }

    closedir DIR2;
  }

  closedir DIR1;

}

closedir DIR;
# }}}

foreach my $file (@$global_midfiles) {
  if(!$conffiles->{$file->[1]}) {
    my ($fname) = get_config_files($file->[1]);
    $conffiles->{$file->[1]} = read_configuration($fname) or do {
      print STDERR "could not read configfile $fname: $!\n";
      next;
    };
  }

  my $cfg_fname = get_conf_val($conffiles->{$file->[1]},$Forum,$file->[0]);
  cleanup_mid_file(\%mids,$cfg_fname,'',$file->[2]);
}

foreach my $file (@$global_tidfiles) {
  if(!$conffiles->{$file->[1]}) {
    my ($fname) = get_config_files($file->[1]);
    $conffiles->{$file->[1]} = read_configuration($fname) or do {
      print STDERR "could not read configfile $fname: $!\n";
      next;
    };
  }

  my $cfg_fname = get_conf_val($conffiles->{$file->[1]},$Forum,$file->[0]);
  cleanup_tid_file(\%tids,$cfg_fname,'',$file->[2]);
}


# {{{ usage
sub usage {
  print STDERR <<EOF;

Usage:
  $0 [options]

Options:
  --config-directory=DIR    The directory containing the configuration files
  --forum-name=NAME         The name of the forum instance

EOF

  exit(-1);
}
# }}}

# {{{ cleanup_tid_file
sub cleanup_tid_file {
  my $tidlist = shift;
  my $file    = shift;
  my $uname   = shift;
  my $pattern = shift;

  my @deleted = ();

  my $key   = '';
  my $value = '';

  my $regex = '';

  return unless -f $file;

  my $dbfile = new BerkeleyDB::Btree(
    Filename => $file,
    Flags => DB_CREATE
  ) or return;

  if($pattern) {
    $regex = $pattern;
    $regex =~ s!\%t!(\\d+)!g;
    $regex =~ s!\%u!(\\s+)!g;
  }
  else {
    $regex = '^(\d+)$';
  }

  my $cursor = $dbfile->db_cursor();

  while($cursor->c_get($key,$value,DB_NEXT) == 0) {
    if($key =~ /$regex/) {
      my $tid = $1;

      push @deleted,[$tid,$key] unless $tidlist->{"t$tid"};
    }
  }

  $cursor->c_close;

  foreach my $del (@deleted) {
    $dbfile->db_del($del->[1]);
  }

  $dbfile->db_close();
}
# }}}

# {{{ cleanup_mid_file
sub cleanup_mid_file {
  my $midlist = shift;
  my $file    = shift;
  my $uname   = shift;
  my $pattern = shift;

  my @deleted = ();

  my $key   = '';
  my $value = '';

  my $regex = '';

  return unless -f $file;

  my $dbfile = new BerkeleyDB::Btree(
    Filename => $file,
    Flags => DB_CREATE
  ) or return;

  if($pattern) {
    $regex = $pattern;
    $regex =~ s!\%m!(\\d+)!g;
    $regex =~ s!\%u!(\\s+)!g;
  }
  else {
    $regex = '^(\d+)$';
  }

  my $cursor = $dbfile->db_cursor();

  while($cursor->c_get($key,$value,DB_NEXT) == 0) {
    if($key =~ /$regex/) {
      my $mid = $1;

      push @deleted,[$mid,$key] unless $midlist->{"m$mid"};
    }
  }

  $cursor->c_close;

  foreach my $del (@deleted) {
    $dbfile->db_del($del->[1]);
  }

  $dbfile->db_close();
}
# }}}

# eof
