#!/usr/bin/perl -w

# {{{ initial comments
#
# $LastChangedDate$
# $LastChangedRevision$
# $LastChangedBy$
#
# }}}

# {{{ program header

#
use strict;
use vars qw($Bin $Script $Plugins $UserName $exec_prefix $prefix $Forum);

BEGIN {
  my $null = $0; $null =~ tr!\\!/!; # for win :-(
  $Bin     = ($null =~ /^(.*)\/.*$/)? $1 : '.';
  $Script  = ($null =~ /^.*\/(.*)$/)? $1 : $null;

  # get needed environments
  die "Could not get config path, set CF_CONF_DIR!" unless $ENV{CF_CONF_DIR};
  die "Could not get forum name, set CF_FORUM_NAME!" unless $ENV{CF_FORUM_NAME};

  $Plugins = {};
  $UserName = '';
  $prefix  = "@prefix@";
  $exec_prefix = "@exec_prefix@";

  $Forum = $ENV{CF_FORUM_NAME};
}

use lib "@libdir@/cforum";

sub VERSION {(q$Revision$ =~ /([\d.]+)\s*$/)[0] or '0.0'}

use CGI;
use CGI::Carp qw/fatalsToBrowser/;

use DBI;

use XML::GDOME;

use HTML::Entities;
use CForum::Template;

use Storable qw/dclone/;
use POSIX qw/mktime/;
use File::Path;

use ForumUtils qw(
  read_configuration
  get_node_data
  get_template
  get_error recode
  uniquify_params
  get_config_files
  get_user_config_file
  create_directory_structure
  get_conf_val
  fatal
  is_admin
);

use CForum::Validator qw/is_valid_http_link is_valid_link is_valid_mailaddress/;

# }}}

# {{{ generate_edit_output
sub generate_edit_output {
  my ($cgi,$fo_default_conf,$fo_view_conf,$fo_userconf_conf,$user_config,$err) = @_;
  my $tpl = new CForum::Template(get_template($fo_default_conf,$user_config,get_conf_val($fo_userconf_conf,$Forum,'Edit'))) or die $@;

  foreach my $modconf (@{$fo_userconf_conf->{$Forum}->{ModuleConfig}}) {
    my $doc   = XML::GDOME->createDocFromURI(sprintf($modconf->[0],get_conf_val($fo_default_conf,$Forum,'Language'))) or die $!;
    my @nodes = $doc->findnodes('/config/*');

    foreach my $directive (@nodes) {
      my $dname     = $directive->getAttribute('name');
      my @arguments = $directive->getElementsByTagName('argument');
      my $i         = 0;

      foreach my $arg (@arguments) {
        my $pname = $arg->getAttribute('paramname');
        my $val   = $user_config->{global}->{$dname}->[0]->[$i++];
        $val = join ',',$cgi->param($pname) if $cgi->param($pname);

        next if !defined($val) || !length($val);

        if($arg->getAttribute('parse') eq 'date') {
          my ($sec,$min,$hour,$day,$mon,$year) = localtime $val;

          $mon  += 1;
          $year += 1900;

          $val = sprintf('%02d. %02d. %4d %02d:%02d:%02d',$day,$mon,$year,$hour,$min,$sec);
        }
        else {
          $val =~ s/\"/"/g;
          if($fo_default_conf->{$Forum}->{XHTMLMode} eq 'yes') {
            $val =~ s!\\n!<br />\n!g;
          }
          else {
            $val =~ s!\\n!<br>\n!g;
          }
        }

        $tpl->setvalue($pname,recode($fo_default_conf,$val||''));
      }
    }
  }

  my $is_admin         = is_admin($fo_default_conf,$UserName) || 0;

  my $categories = new CForum::Template::t_cf_tpl_variable($CForum::Template::TPL_VARIABLE_ARRAY);
  my @cats = get_conf_val($fo_default_conf,$Forum,'Categories');

  $categories->addvalue($_) foreach @cats;

  $tpl->setvar('categories',$categories);
  $tpl->setvalue('err',$err) if $err;
  $tpl->setvalue('is_admin','yes') if $is_admin;
  $tpl->setvalue('forumbase',recode($fo_default_conf,get_conf_val($fo_default_conf,$Forum,'UBaseURL')));
  $tpl->setvalue('userconfig',recode($fo_default_conf,get_conf_val($fo_default_conf,$Forum,'UserConfig')));
  $tpl->setvalue('script',recode($fo_default_conf,get_conf_val($fo_default_conf,$Forum,'UserConfig')));
  $tpl->setvalue('usermanagement',get_conf_val($fo_default_conf,$Forum,'UserManagement'));
  $tpl->setvalue('charset',get_conf_val($fo_default_conf,$Forum,'ExternCharset'));

  #
  # display plugins
  #
  foreach(@{$Plugins->{display}}) {
    &$_($fo_default_conf,$fo_userconf_conf,$user_config,$cgi,$tpl);
  }

  print $cgi->header(-type => 'text/html; charset='.get_conf_val($fo_default_conf,$Forum,'ExternCharset')),$tpl->parseToMem;
}
# }}}

# {{{ validate_input
sub validate_input {
  my $val   = shift;
  my $dname = shift;
  my $cfg   = shift;

  if(exists $cfg->{$Forum}->{MinVal}) {
    my ($minval) = grep { $_->[0] eq $dname } @{$cfg->{$Forum}->{MinVal}};
    return if defined $minval && $minval->[1] > $val;
  }

  if(exists $cfg->{$Forum}->{MaxVal}) {
    my ($maxval) = grep { $_->[0] eq $dname } @{$cfg->{$Forum}->{MaxVal}};
    return if defined $maxval && $maxval->[1] < $val;
  }

  if(exists $cfg->{$Forum}->{MinLength}) {
    my ($minlen) = grep { $_->[0] eq $dname } @{$cfg->{$Forum}->{MinLength}};
    return if defined $minlen && $minlen->[1] > length($val);
  }

  if(exists $cfg->{$Forum}->{MaxVal}) {
    my ($maxlen) = grep { $_->[0] eq $dname } @{$cfg->{$Forum}->{MaxLength}};
    return if defined $maxlen && $maxlen->[1] < length($val);
  }

  return 1;
}
# }}}

my @fnames;
die "could not get config files" unless @fnames = get_config_files("fo_default","fo_view","fo_userconf");

my $fo_default_conf  = read_configuration($fnames[0]) or die $!;
my $fo_view_conf     = read_configuration($fnames[1]) or die $!;
my $fo_userconf_conf = read_configuration($fnames[2]) or die $!;
my $user_config      = {};

my $cgi              = new CGI;
my $action           = $cgi->param('a') || 'view';

# {{{ load plugins and authenticate
foreach(@{$fo_userconf_conf->{global}->{AddModule}}) {
  eval "use $_->[0];";
  fatal($cgi,$fo_default_conf,$user_config,sprintf(get_error($fo_default_conf,'PLUGIN_ERR'),"$@"),get_conf_val($fo_default_conf,$Forum,'ErrorTemplate')) if $@;
}

foreach(@{$Plugins->{auth}}) {
  last if &$_($fo_default_conf,$fo_view_conf,$fo_userconf_conf);
}
# }}}

if($cgi->param('cs')) {
  my $err = uniquify_params($fo_default_conf,$cgi,'cs');
  fatal($cgi,$fo_default_conf,$user_config,recode($fo_default_conf,$err),get_conf_val($fo_default_conf,$Forum,'ErrorTemplate')) if $err;
}

# {{{ read user configuration
if($UserName) {
  my $cfile = get_user_config_file($fo_default_conf,$UserName);
  $user_config = read_configuration($cfile) or die $!;
}
else {
  print $cgi->redirect($fo_default_conf->{$Forum}->{UserRegister}->[0]->[0]);
  exit;
}
# }}}

# {{{ you should not do this, it's really bad
if(my $val = get_conf_val($user_config,'global','TPLMode')) {
  $fo_default_conf->{$Forum}->{XHTMLMode} = ($val =~ /xhtml/i) ? 'yes' : 'no';
}
else {
  $fo_default_conf->{$Forum}->{XHTMLMode} = 'no';
}
# }}}

# {{{ save user configuration
if($action eq 'save') {
  my $own_ucfg = dclone($user_config);

  foreach my $modconf (@{$fo_userconf_conf->{$Forum}->{ModuleConfig}}) {
    my $doc   = XML::GDOME->createDocFromURI(sprintf($modconf->[0],get_conf_val($fo_default_conf,$Forum,'Language'))) or die $!;
    my @nodes = $doc->findnodes('/config/*');

    foreach my $directive (@nodes) {
      my $dname     = $directive->getAttribute('name');
      my @arguments = $directive->getElementsByTagName('argument');
      my $i         = 0;

      foreach my $arg (@arguments) {
        my $pname    = $arg->getAttribute('paramname');
        my $vali     = ($arg->getElementsByTagName('validate'))[0];
        my $validate = get_node_data($vali);
        my $val      = join ',',$cgi->param($pname);
        my $enc      = $arg->getAttribute('encode');

        # {{{ argument value may be empty, delete it or set list value empty
        if(!$val || $val eq 'default') {
          if($i == 0) {
            delete $own_ucfg->{global}->{$dname} if exists $own_ucfg->{global}->{$dname};
          }
          else {
            $own_ucfg->{global}->{$dname}->[0]->[$i] = '' if exists $own_ucfg->{global}->{$dname};
          }

          $i++;
          next;
        }
        # }}}

        # {{{ we deleted the first value
        unless(exists $own_ucfg->{global}->{$dname}) {
          $own_ucfg->{$dname} = [ [ ] ];
          if($enc eq 'html') {
            $own_ucfg->{global}->{$dname}->[0]->[$i] = encode_entities($val);
          }
          else {
            $own_ucfg->{global}->{$dname}->[0]->[$i] = $val;
          }
        }
        # }}}

        # {{{ directive value validation
        # everything's prepared, lets validate the input; if no validate content is given,
        # we look for the 'type' attribute and use a predefined validation
        if($validate) {
          if($val !~ /$validate/ || !validate_input($val,$dname,$fo_userconf_conf)) {
            my $err = get_node_data(($arg->getElementsByTagName('error'))[0]);
            generate_edit_output($cgi,$fo_default_conf,$fo_view_conf,$fo_userconf_conf,$user_config,$err);
            exit;
          }
        }
        else {
          my $type = $vali->getAttribute('type');

          # http-url is a specialization for 'url'
          if($type eq 'http-url') {
            if(is_valid_http_link($val) || !validate_input($val,$dname,$fo_userconf_conf)) {
              my $err = get_node_data(($arg->getElementsByTagName('error'))[0]);
              generate_edit_output($cgi,$fo_default_conf,$fo_view_conf,$fo_userconf_conf,$user_config,$err);
              exit;
            }
          }
          # url means, *all* urls, inkl. gopher and so on
          elsif($type eq 'url') {
            if(is_valid_link($val) || !validate_input($val,$dname,$fo_userconf_conf)) {
              my $err = get_node_data(($arg->getElementsByTagName('error'))[0]);
              generate_edit_output($cgi,$fo_default_conf,$fo_view_conf,$fo_userconf_conf,$user_config,$err);
              exit;
            }
          }
          # email means, input is a mail address
          elsif($type eq 'email') {
            if(is_valid_mailaddress($val) || !validate_input($val,$dname,$fo_userconf_conf)) {
              my $err = get_node_data(($arg->getElementsByTagName('error'))[0]);
              generate_edit_output($cgi,$fo_default_conf,$fo_view_conf,$fo_userconf_conf,$user_config,$err);
              exit;
            }
          }
          else {
            fatal($cgi,$fo_default_conf,$user_config,get_error($fo_default_conf,'UNKNOWN_DIRECTIVE_TYPE'),get_conf_val($fo_default_conf,$Forum,'ErrorTemplate'));
          }
        }
        # }}}
      }
    }
  }

  #
  # run config plugins
  #
  foreach(@{$Plugins->{writeconf}}) {
    &$_($fo_default_conf,$fo_view_conf,$fo_userconf_conf,$user_config,$own_ucfg,$cgi);
  }

  # all checks are ok, lets write the config file
  my $cfile = get_user_config_file($fo_default_conf,$UserName);
  open DAT,'>'.$cfile or fatal($cgi,$fo_default_conf,$user_config,sprintf(get_error($fo_default_conf,'IO_ERR'),"$!"),get_conf_val($fo_default_conf,$Forum,'ErrorTemplate'));

  foreach my $dir (keys %{$own_ucfg->{global}}) {
    next if !$own_ucfg->{global}->{$dir} || !@{$own_ucfg->{global}->{$dir}};

    print DAT $dir;
    foreach my $entry (@{$own_ucfg->{global}->{$dir}}) {
      foreach(@{$entry}) {
        my $val = $_ || '';

        $val =~ s!\\!\\\\!g;
        $val =~ s/\015\012|\015|\012/\\n/sg;
        $val =~ s/"/\\"/g;

        print DAT ' "'.$val.'"';
      }
    }

    print DAT "\n";
  }

  close DAT;

  my $tpl = new CForum::Template(get_template($fo_default_conf,$user_config,get_conf_val($fo_userconf_conf,$Forum,'EditOk'))) or die $!;

  $tpl->setvalue('forumbase',recode($fo_default_conf,get_conf_val($fo_default_conf,$Forum,'UBaseURL')));
  $tpl->setvalue('userconfig',recode($fo_default_conf,get_conf_val($fo_default_conf,$Forum,'UserConfig')));
  $tpl->setvalue('script',recode($fo_default_conf,get_conf_val($fo_default_conf,$Forum,'UserConfig')));
  $tpl->setvalue('charset',get_conf_val($fo_default_conf,$Forum,'ExternCharset'));
  $tpl->setvalue('acceptcharset',get_conf_val($fo_default_conf,$Forum,'ExternCharset').', UTF-8');

  print $cgi->header(-type => 'text/html; charset='.get_conf_val($fo_default_conf,$Forum,'ExternCharset')),$tpl->parseToMem;
}
# }}}
# {{{ show options
else {
  if($action && $Plugins->{$action}) {
    &{$Plugins->{$action}}($fo_default_conf,$fo_view_conf,$fo_userconf_conf,$user_config,$cgi);
  }
  else {
    generate_edit_output($cgi,$fo_default_conf,$fo_view_conf,$fo_userconf_conf,$user_config)
  }
}
# }}}

# eof
